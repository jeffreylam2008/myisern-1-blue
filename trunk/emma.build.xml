<project name="emma" default="emma">
  <description>
  Provides the Emma tool and the Hackystat Emma sensor.
  </description>

  <import file="build.xml"/>
  <import file="tomcat.build.xml"/>
  <property name="emma.dir" location="${build.dir}/emma" />
  <property name="junit.dir" location="${build.dir}/junit" />
  
  <!-- Make sure emma is installed. We need version 2.0.5312. -->
  <available file="${env.EMMA_HOME}/lib/emma.jar" property="emma.available"/>
  <fail unless="emma.available"  message="Error: EMMA_HOME not set or emma.jar not found, indicating Emma is not installed."/>
   
  <!-- Define the path and taskdef containing the emma binaries. -->
  <property name="emma.lib.dir" value="${env.EMMA_HOME}/lib" />
  <path id="emma.lib.dir" >
    <pathelement location="${emma.lib.dir}/emma_ant.jar" />
    <pathelement location="${emma.lib.dir}/emma.jar" />
  </path>
  <taskdef resource="emma_ant.properties" classpathref="emma.lib.dir" />  

  <target name="emma" depends="emma.tool, emma.report, emma.echo" description="Runs Emma and the report."/>

  <target name="emma.tool" depends="clean, compile, emma.instrument, tomcat.deploy, emma.junit, emma.dump" 
    description="Cleans, compiles, instruments byte codes, runs unit tests, generates Emma report."/>
 
  <target name="emma.instrument" 
    description="Instruments the class files in the war/WEB-INF/classes directory, and adds emma.jar to WEB-INF/lib">
    <!-- Instrument the .class files. -->     
    <mkdir dir="${emma.dir}" />
    <emma enabled="true" >
      <instr instrpath="${build.war.web.inf.classes.dir}"
             destdir="${build.war.web.inf.classes.dir}"
             metadatafile="${emma.dir}/metadata.emma"
             merge="true" mode="overwrite">
        <filter excludes="edu.hawaii.*.Test*"/>          
      </instr>
    </emma>
  </target>
  
  <target name="emma.junit"
    description="Runs JUnit with additional Emma jars and properties.">
    <mkdir dir="${junit.dir}" />
    <junit printsummary="withOutAndErr" fork="yes">
      <classpath>
        <pathelement location="${build.war.web.inf.classes.dir}" />
        <path refid="compile.classpath"/>
        <pathelement location="${env.HTTPUNIT_HOME}/jars/Tidy.jar"/>        
        <pathelement location="${env.HTTPUNIT_HOME}/jars/js.jar"/>        
        <path refid="emma.lib.dir" />
        <pathelement location="${java.class.path}" />
      </classpath>
      <sysproperty key="test.host" value="${test.host}"/>      
      <sysproperty key="emma.coverage.out.file" value="${emma.dir}/client.emma" />
      <sysproperty key="emma.coverage.out.merge" value="true" />
      <sysproperty key="emma.rt.control" value="false" />  
      <formatter type="xml" />
      <batchtest todir="${junit.dir}">
        <fileset dir="${src.dir}">
          <include name="**/Test*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  
  <target name="emma.dump"
    description="Stops the server in order to get the coverage data from Tomcat.">
    <!-- Windows specific implementation. --> 
    <exec executable="cmd.exe" spawn="false" osfamily="windows">
      <arg line="/c shutdown.bat"/>
    </exec>
    
    <!-- Unix specific implementation. --> 
    <exec executable="catalina.sh" spawn="false" osfamily="unix">
       <arg value="stop"/>
    </exec>
    
    <echo message="Wait for coverage.ec (maximum of 10 seconds)."/>
    <waitfor maxwait="10" maxwaitunit="second">
      <available file="${basedir}/coverage.ec"/>
    </waitfor>
    <copy file="${basedir}/coverage.ec" tofile="${emma.dir}/server.ec" />
    <delete file="${basedir}/coverage.ec" />
  </target>    

  <target name="emma.report"
    description="Generate the emma report.">
    <emma enabled="true" >
      <report sourcepath="${src.dir}"
              sort="+name"
              metrics="method:70,block:80,line:80,class:100">
        <fileset dir="${emma.dir}" >
            <include name="*.emma" />
            <include name="*.ec" />
        </fileset>
        <xml outfile="${emma.dir}/coverage.xml" depth="method" />
        <html outfile="${emma.dir}/coverage.html"
              depth="method" columns="name,class,method,block,line" />
      </report>
    </emma>
  </target>
      
  <target name="emma.echo" description="Sends summary of Emma results to console">
  <!-- It's ridiculous what we have to do to get a decent summary. -->
    <xslt style="${basedir}/lib/emma/hackystat.emma.xsl" 
          in="${emma.dir}/coverage.xml" out="${emma.dir}/coverage.brief.txt" />  
    <replace file="${emma.dir}/coverage.brief.txt" token="class, %"  value="class: "/>
    <replace file="${emma.dir}/coverage.brief.txt" token="method, %" value="method:"/>
    <replace file="${emma.dir}/coverage.brief.txt" token="block, %"  value="block: "/>
    <replace file="${emma.dir}/coverage.brief.txt" token="line, %"   value="line:  "/>
    <concat>
       <header>Emma Coverage summary</header>
       <fileset file="${emma.dir}/coverage.brief.txt"/>
    </concat>
  </target>      

  <target name="emma.sensor" description="Sends Emma coverage data to Hackystat using the Emma sensor.">
    <!-- Define the emma sensor taskdef, failing the build if the sensor is not installed. -->
    <available classname="org.hackystat.sensor.emma.EmmaSensor" property="emma.sensor.available"/>
    <fail unless="emma.sensor.available" message="Error: Emma sensor not installed."/>
    <taskdef name="hacky-emma" classname="org.hackystat.sensor.emma.EmmaSensor"/>
    
    <!-- Send Coverage data to Hackystat using the Emma sensor. --> 
    <hacky-emma verbose="${hackystat.verbose.mode}" emmaReportXmlFile="${emma.dir}/coverage.xml">
      <fileset dir="${src.dir}" includes="**/*.java" />
    </hacky-emma>
  </target>
</project>